<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	
	<!-- Spring的配置文件，这里主要配置和业务逻辑有关的 -->
	
	<!-- 扫描除了控制器之外的  讲业务逻辑组件全部加入进来 -->
	<context:component-scan base-package="com.liufeng">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	
	<!-- 先引入这个外部的配置文件 然后就可以在这个文件里面使用美元加大括号提取其中的属性值 -->
	<context:property-placeholder location="classpath:dbconfig.properties"/>
	<!-- 1数据源 事物控制 核心业务逻辑组件 -->
	
	<bean id ="PooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
		<property name="driverClass" value="${jdbc.driverClass}"></property>
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>
	
	<!-- 2 配置与Mybatis的整合-->
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指定一个mybatis全局配置文件 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml"></property>
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<property name="dataSource" ref="PooledDataSource"></property>
	</bean>
	
	<!-- 批量插入的sqlsession  时间上会变慢 但是线程安全  -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
		<!--<constructor-arg name="executorType" value="BATCH"></constructor-arg>--> <!--这里如果设置成batch的话有可能造成删除 更改返回-2147482646-->
	</bean>
	
	<!-- 配置扫描器 将mubatis接口的实现(dao下)加入IOC容器 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.liufeng.npc.dao"></property>
	</bean>
	
	
	<!-- 3事物控制的配置  熟练-->
	
	<bean  id ="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 控制住数据源 开启关闭回滚操作使用这个事物管理器来做 -->
		<property name="dataSource" ref="PooledDataSource"></property>

	</bean>

	<!--上传文件的支持-->


	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8"/>
		<property name="maxUploadSizePerFile" value="10485760"/>
		<property name="maxUploadSize" value="209715200"/>
		<!--resolveLazily属性启用是为了推迟文件解析，以便在UploadAction 中捕获文件大小异常-->
		<property name="resolveLazily" value="true"/>

	</bean>
<!--======================shiro===================================================-->
	<!--shiro 创建自己的或者提供的realm cache等东西 方便加入managert-->
	<bean id="sampleJDBCRealm" class="org.apache.shiro.realm.jdbc.JdbcRealm">
		<property name="dataSource" ref="PooledDataSource"/><!--提供这个realm数据源-->
		<!--登陆认证用户的查询sql 必须要以登陆名为条件 查询密码字段-->
		<property name="authenticationQuery" value="select t.pwd from my_user t where t.username=?"/>
		<!--查询用户角色的sql 必须以登陆名为条件 查询用户角色名字段-->
		<property name="userRolesQuery" value="select a.rolename from my_user t left join my_role a on t.roleid=a.id where t.username=?"/>
		<!--查询出某个角色下的权限资源  如果存在多个角色，则是遍历每个角色，分别查询出权限资源并添加到集合中。
			my_permission 存有权限资源 permissionName  permissionId

			my_role_permission 角色和权限的结合 存有角色ID 权限ID role_id permission_id

			my_role 存有rolename roleID 角色表-->
		<property name="permissionsQuery" value="select p.permissionName
			from my_role r left join my_role_permission rp
			on r.id = rp.role_id
			left join my_permission p
			on rp.permission_id = p.id
			where r.rolename = ? "/>
		<!--默认false。False时不会使用permissionsQuery的SQL去查询权限资源。设置为true才会去执行。-->
		<property name="permissionsLookupEnabled" value="true" />
		<!--saltStyle 密码是否加盐，默认是NO_SALT不加盐。加盐有三种选择CRYPT,COLUMN,EXTERNAL。这里不加盐处理。-->
		<property name="saltStyle" value="NO_SALT" />
		<!--密码匹配规则-->
		<property name="credentialsMatcher" ref="hashedCredentialsMatcher" />

	</bean>

	<bean id="hashedCredentialsMatcher"
		  class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
		<!--加密方式可以有MD5或者SHA-1，如果对密码安全有更高要求可以用SHA-256或者更高。这里使用MD5-->
		<property name="hashAlgorithmName" value="MD5" />
		<!--默认是true，此时用的是密码加密用的是Hex编码；false时用Base64编码-->
		<property name="storedCredentialsHexEncoded" value="true" />
		<!--hashIterations 迭代次数，重复加密几次 默认值是1。-->
		<property name="hashIterations" value="1" />
	</bean>


<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager"/>


	<!--shiro securityManagerper加入容器内下一步 FileterFactory加入配置-->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!--在这里面配置realm cache 等东西-->
		<property name="realm" ref="sampleJDBCRealm"/>
		<!--如果有多个realm 就用realms-->
		
		<property name="cacheManager" ref="cacheManager"/>
	</bean>

	<!--shiro FileterFactory加入容器内下一步 没有了-->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />

	</bean>



	<!-- 开启基于注解的事物吗，使用xml形式的事物（主要使用的事配置试） -->
	<aop:config>
		<!-- 切入点表达式  -->
		<aop:pointcut expression="execution(* com.liufeng.npc.service..*(..))" id="txPoint"/>
		<!-- 配置事物增强 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
	</aop:config>
	
	<!-- 配置事物增强 也就是事物如何切入 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- *所有方法都是事物方法 -->
			<tx:method name="*"/>
			<!-- get所有方法都是查询方法 -->
			<tx:method name="get*" read-only="true"/>
			
		</tx:attributes>
	</tx:advice>
	
	<!-- Spring 配置的核心 1数据源 与2mybatis的整合 3事物控制的配置 -->
</beans>
